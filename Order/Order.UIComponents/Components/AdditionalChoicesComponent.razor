@using Order.Core.Entities
@using Order.Core.Entities.Basket
@using System.Text.Json
@if (PossibleChoices is not null && AdditionalChoices is not null) {
    <div>
        <h5>Additional Choices:</h5>
        @foreach (AdditionalChoice choice in PossibleChoices) {
            switch (@choice.MinimumSelectableChoices, @choice.MaximumSelectableChoices, @choice.PossibleChoices.Count()) {
                case (1,1,_): //option buttons
                    <h6>@choice.Name (Select 1)</h6>
                    <select @onchange="@(async e=> await ChoiceChanged(e,choice))"> @*@bind="choice.SelectedChoices"*@
                    @foreach (string possibleChoice in choice.PossibleChoices) {
                        <option value="@possibleChoice" selected="@(choice.SelectedChoices.Contains(possibleChoice))">@possibleChoice</option>
                    }
                    </select>
                    break;
                case (0,1,>1)://option buttons with added "None"
                    <h6>@choice.Name (Select 1)</h6>
                    <select class="form-control" @onchange="@(async e=> await ChoiceChanged(e,choice))"> @*@bind="choice.SelectedChoices"*@
                        <option value="none">None</option>
                    @foreach (string possibleChoice in choice.PossibleChoices) {
                        <option value="@possibleChoice"  selected="@(choice.SelectedChoices.Contains(possibleChoice))">@possibleChoice</option>
                    }
                    </select>
                    break;
                case (0,1,1): //one checkbox
                    <h6>@choice.Name</h6>                   
                    @foreach (string possibleChoice in choice.PossibleChoices) {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" checked="@(choice.SelectedChoices.Contains(possibleChoice))" @onchange="@(async e=> await MultipleChoiceChanged(e,choice, possibleChoice))" />
                            <label class="form-check-label">@possibleChoice</label>
                        </div>
                    }
                    break;
                case (_,>1,>=1): //multiple checkboxes
                     <h6>@choice.Name (between @choice.MinimumSelectableChoices and @choice.MaximumSelectableChoices)</h6>
                    @foreach (string possibleChoice in choice.PossibleChoices) {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" checked="@(choice.SelectedChoices.Contains(possibleChoice))" @onchange="@(async e=> await MultipleChoiceChanged(e,choice, possibleChoice))" />
                            <label class="form-check-label">@possibleChoice</label>
                        </div>
                    }
                    break;
            }
        }
    </div>
}

@code {
    [Parameter]
    public List<BasketItemAdditionalChoice>? AdditionalChoices { get; set; }
    [Parameter]
    public EventCallback<List<BasketItemAdditionalChoice>>  AdditionalChoicesChanged { get; set; }

    [Parameter]
    public List<AdditionalChoice>? PossibleChoices { get; set; }


    List<BasketItemAdditionalChoice>? choices;

    protected override void OnInitialized() {
        choices = PossibleChoices.Select(p=> BasketItemAdditionalChoice.FromPossibleChoice(p)).ToList();
    }

    async Task MultipleChoiceChanged(ChangeEventArgs e, AdditionalChoice choice, string selectedChoice) {
        Console.WriteLine(e.Value);
        bool value = (bool)e.Value;
        if (value) {
            choices.First(c => c.Name == choice.Name).SelectedChoices.Add(selectedChoice);
        } else{
            choices.First(c => c.Name == choice.Name).SelectedChoices.Remove(selectedChoice);
        }
        await AdditionalChoicesChanged.InvokeAsync(choices);
    }

    async Task ChoiceChanged(ChangeEventArgs e, AdditionalChoice choice) {
        Console.WriteLine(e.Value);
        choices.First(c => c.Name == choice.Name).SelectedChoices = new List<string>(){ (string)e.Value} ;
        await AdditionalChoicesChanged.InvokeAsync(choices);
    }
    //async Task BooleanChoiceChanged(ChangeEventArgs e, AdditionalChoice choice) {
    //    Console.WriteLine(e.Value);
    //    bool value = (bool)e.Value;
    //    if(value)
    //        choices.First(c => c.Name == choice.Name).SelectedChoices = new string[1]{ choice.Name} ;
    //    else
    //        choices.First(c => c.Name == choice.Name).SelectedChoices = new string[0];
    //    await AdditionalChoicesChanged.InvokeAsync(choices);
    //}
}
