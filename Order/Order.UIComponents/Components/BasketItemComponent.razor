@using Order.Core.Entities
@using Order.Core.Entities.Basket
@using Order.Core.Interfaces
@inject IBasketService basketService
@inject IProductsService productsService

@if (BasketItem is not null && product is not null) {
    <div class="row justify-content-around">
    <div class="card col-sm-6">
        <div class="row align-items-center">
            <div class="col-sm-2"><input class="form-control" type="number" @oninput="QuantityChanged" value="@BasketItem.Quantity" /> </div>
            <h6 class="col-sm-9">@BasketItem.Name</h6>
            <button class="btn col-sm-1" @onclick="@(async e=>await OnDelete.InvokeAsync(BasketItem))">🚮</button>
        </div>
    @if (product.AdditionalChoices is not null) {
        @foreach (AdditionalChoice choice in product.AdditionalChoices) {
                List<string> basketItemChoices = BasketItem.AdditionalChoices.FirstOrDefault(ac => ac.Id == choice.Id).SelectedChoices;
                switch (@choice.MinimumSelectableChoices, @choice.MaximumSelectableChoices, @choice.PossibleChoices.Count()) {
                case (1, 1, _): //one required choice
                    @if (choice.SelectedChoices is not null) {
                        <p>@choice.Name : @basketItemChoices.First()</p>
                    }

                    break;
                case (0, 1, 1): //one true or false choice 
                    <p>
                        @choice.Name:
                        @if (basketItemChoices is null || basketItemChoices.Count() == 0) {
                            @:Nee
                        } else {
                            @:Ja
                        }
                    </p>
                    break;
                case (0, 1, > 1): //one optional choice between many
                    @if (basketItemChoices is not null) {
                        <p>@choice.Name: 
                        @if (basketItemChoices is not null) {
                            @string.Join(',', basketItemChoices);            
                        }
                        </p>
                    }

                    break;
                case (_, > 1, >= 1): //multiple choices
                    <p>@choice.Name: 
                    @if (basketItemChoices is not null) {
                        @string.Join(',', basketItemChoices);            
                    }
                    </p>

                    break;
            }
        }

    }
    
    </div>
    </div>
}

@code {
        [CascadingParameter]
        public string Code { get; set; }

        [Parameter]
        public BasketItem BasketItem { get; set; }

        [Parameter]
        public EventCallback<BasketItem> OnDelete { get; set; }

        Product product;

    protected override async Task OnInitializedAsync() {
        product = await productsService.GetProductById(BasketItem.ProductId);
    }

    async Task QuantityChanged(ChangeEventArgs args) {
        if (int.TryParse(args.Value?.ToString(),out int result)){
            await basketService.UpdateQuantity(Code, BasketItem.Id, result);
        }
    }
}
