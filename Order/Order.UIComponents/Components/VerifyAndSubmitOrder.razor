@using Order.Core.Entities
@using Order.Core.Entities.Basket
@using Order.Core.Interfaces
@inject IBasketService basketService
@inject ICustomerService customerService
<h3>Verify And Submit Order</h3>

@if (customer is not null) {
    <p>Name: @customer.Name</p>
    <p>Room: @customer.Room</p>
    <p>Additional Notes: @customer.Note</p>
}

@if(basket is not null) {
    @foreach (BasketItem basketItem in basket) {
        <BasketItemComponent BasketItem="basketItem" OnDelete="DeleteBasketItem"></BasketItemComponent>
    }
}
@code {
    private Customer customer;
    private IEnumerable<BasketItem> basket;

    [CascadingParameter]
    public string Code { get; set; }

    protected override async Task OnInitializedAsync() {
        try {
            customer = await customerService.GetCustomer();
            basket = await basketService.GetBasketItems(Code);
        } catch (Exception ex) {
            Console.WriteLine(ex.GetType().Name + " " + ex.Message);

        }
    }

    //async Task QuantityChanged(ChangeEventArgs args, BasketItem basketItem) {
    //    await basketService.UpdateQuantity(Code, basketItem.Id, int.Parse(args.Value.ToString()));
    //}

    async Task DeleteBasketItem(BasketItem itemToDelete) {
        await basketService.DeleteBasketItem(Code, itemToDelete.Id);
        basket = await basketService.GetBasketItems(Code);
    }
}
