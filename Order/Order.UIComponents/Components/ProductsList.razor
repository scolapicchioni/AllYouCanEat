@using Order.Core.Entities
@using Order.Core.Entities.Basket
@using Order.Core.Interfaces
@using System.Text.Json
@inject IProductsService productsService
@inject IBasketService basketService

@if(product is not null){
    <ProductToAddToBasket Product="product" BasketItem="BasketItem" OnAddItemToBasket="AddItemToBasket" OnCancel="CancelAdd"></ProductToAddToBasket>
}else{
    @if (Products is not null) {
        foreach (string category in Products.Keys) {
            <div class="row">
                <h2>@category</h2>
                @foreach (Product p in Products[category]) {
                    <div class="row">
                        <div class="col col-sm-12">
                        <div class="card" @onclick="@(e=>Show(p))" style="cursor:pointer">
                            <div class="card-header">
                                
                            <h5 class="card-title">@p.Name 
                            @if (p.GlutenFree) {
                                    <span class="ml-auto">🌽</span>
                            }
                            @if (p.Vegetarian) {
                                @:🥦
                            }
                            </h5>
                            </div>
                        </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
@code {
    [CascadingParameter]
    public string Code { get; set; }

    public Dictionary<string, List<Product>> Products{get;set;}
    string addingProductName = string.Empty;
    Product? product;
    BasketItem BasketItem;
    protected override async Task OnInitializedAsync() {
        Products = await productsService.GetAvailableProductsAsync();
    }
    public void Show(Product product) {
        BasketItem = BasketItem.FromProduct(product);
        BasketItem.Quantity = 1;
        addingProductName = product.Name;
        this.product = product;
    }
    public void AddItemToBasket(BasketItem basketItem) {
        basketService.PutInBasket(Code, basketItem);
        addingProductName = string.Empty;
        product = null;
    }
    public void CancelAdd() {
        addingProductName = string.Empty;
        product = null;
    }
}
